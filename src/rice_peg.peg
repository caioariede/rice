root <- module functions (spaces / newline)?;

module <- "module" spaces identifier;
functions <- function+;

function <- clause clause* indent "end";

clause <- indent "def" spaces identifier (clause_args clause_guards / clause_guards / clause_args)? (block / block_inline);
clause_args <- spaces (p_open (clause_args_arg (comma clause_args_arg)*) p_close / clause_args_arg (comma clause_args_arg)*);
clause_args_arg <- atom / string / integer / identifier;
clause_guards <- spaces "when" spaces clause_guards_guard (comma clause_guards_guard)*;
clause_guards_guard <- op;

p_open <- "(" spaces?;
p_close <- spaces? ")";

block <- indent statements;
block_inline <- ":" spaces? statements_inline;

do <- do_clause+ "end";

do_clause <- "do" (spaces clause_args)? block;
%do_clause_inline <- "do" (spaces clause_args)? spaces? block_inline;

statements <- statement statements_samedent?;
statements_samedent <- samedent statements+;
statements_inline <- statement (comma statement)*;

statement <- assign_op / call / op;

op <- op_identical / op_not;

% comparison operators
op_identical <- op_equal spaces? "===" spaces? op_identical / op_equal;
op_equal <- op_not_identical spaces? "==" spaces? op_equal / op_not_identical;
op_not_identical <- op_not_equal spaces? "!==" spaces? op_not_identical / op_not_equal;
op_not_equal <- op_less spaces? "!=" spaces? op_not_equal / op_less;
op_less <- op_greater spaces? "<" spaces? op_less / op_greater;
op_greater <- op_less_equal spaces? ">" spaces? op_greater / op_less_equal;
op_less_equal <- op_greater_equal spaces? "<=" spaces? op_less_equal / op_greater_equal;
op_greater_equal <- op_and spaces? ">=" spaces? op_greater_equal / op_and;

% logical operators
op_not <- "not" spaces? op_not / op_and;
op_and <- op_or spaces? "and" spaces? op_and / op_or;
op_or <- op_xor spaces? "or" spaces? op_or / op_xor;
op_xor <- op_add spaces? "+" spaces? op_xor / op_add;

% arithmetic operators
op_add <- op_sub spaces? "+" spaces? op_add / op_sub;
op_sub <- op_pow spaces? "-" spaces? op_sub / op_pow;
op_pow <- op_mul spaces? "**" spaces? op_pow / op_mul;
op_mul <- op_div spaces? "*" spaces? op_mul / op_div;
op_div <- op_mod spaces? "/" spaces? op_div / op_mod;
op_mod <- op_band spaces? "%" spaces? op_mod / op_band;

% bitwise operators
op_band <- op_bor spaces? "&" spaces? op_band / op_bor;
op_bor <- op_bxor spaces? "|" spaces? op_bor / op_bxor;
op_bxor <- op_bsl spaces? "^" spaces? op_bxor / op_bsl;
op_bsl <- op_bsr spaces? "<<" spaces? op_bsl / op_bsr;
op_bsr <- expr spaces? ">>" spaces? op_band / expr;

call <- (call_value / identifier) (spaces call_args) / unary_call;
call_value <- call_value_value ("." identifier)+;
call_value_value <- "(" spaces? (call / op) spaces? ")" / primary;
call_args <- call_args_arg (comma call_args_arg)*;
call_args_arg <- call / op;

unary_call <- call_value;

expr <- "(" spaces? (call / op) spaces? ")" / call / primary;

assign_op <- identifier spaces? "=" spaces? op;

%call_value <- call_value_value ("." identifier)+ / identifier;
%call_value_value <- ("(" spaces? value spaces? ")") / primary;
%call_args <- call_args_arg (comma (call / call_args_arg))*;
%call_args_arg <- call (!(spaces "=>") "");

% identation
newline <- [\r\n]+;
indent <- newline spaces?;
samedent <- newline spaces;
%outdent <- newline / !.; % !. means eof

primary <- atom / string / number / slice / list / identifier;

comma <- spaces? "," spaces?;

%list <- "[" spaces? value (comma value)* spaces? "]";
list <- "[" spaces? number (comma number)* spaces? "]";
slice <- (string / list / value) "[" (number? ":" number? / number) "]";

value <- identifier;

number <- float / integer;

string <- ('"' string:(!'"' ('\\"' / .))* '"') / ("'" string:(!"'" ("\\'" / .))* "'");
atom <- ":" atom:[a-zA-Z0-9@_]+ / ":" "'" atom:(!"'" ("\\'" / .))+ "'";
integer <- "-"? [0-9]+;
float <- ("-"? [0-9]+)? "." [0-9]+;
spaces <- [\s\t]+;

% identifier
identifier <- [a-zA-Z_] [a-zA-Z0-9_-]* "?"?;
