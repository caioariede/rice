#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pa ebin/

-define(optspec, [
    {'help',    'h', boolean},
    {'version', 'V', boolean},
    {'to-erl',       boolean},
    {'to-ast',       boolean},
    {'output',  'o', {list, string}},
    {'include', 'I', {list, string}},
    {'pa',      'a', {list, string}},
    {'pz',      'z', {list, string}},
    {'macro',   'D', {keylist, string}},
    {'macro',   'D', {list, string}},
    {'warn',    'W', integer},
    {'verbose', 'v', boolean},
    {'term',    'T', {list, string}}
]).

-define(defaults, [
    {'output',  "./"},
    {'verbose', 1},
    {'to-erl', 0}
]).

usage() ->
    version(),
    io:format("~nUsage: rice [option] file~n~n"
           ++ "-h, --help\tShow this help~n"
           ++ "-V, --version\tPrint Rice version~n"
           ++ "--to-erl\tConvert code to Erlang source~n"
           ++ "~nErlang Compiler Flags (see: man erlc)~n~n"
           ++ "-o, --output\t\tWhere the compiler should place output files~n"
           ++ "-I, --include\t\tSpecify a search directory for include files~n"
           ++ "-a, --pa\t\tAppends directory to the front of code path~n"
           ++ "-z, --pz\t\tAppends directory to the end of code path~n"
           ++ "-m, --macro name\tDefines a macro~n"
           ++ "-m, --macro name=value\tDefines a macro with the given value~n"
           ++ "-W, --warn number\tWarning verbosity (0..2) Default is 1~n"
           ++ "-v, --verbose\t\tEnable verbose output~n"
           ++ "-T, --term\t\tErlang term passed unchanged to the compiler~n"
           ++ "~n").

main(Args) ->
    {Opts, File} = getoptions:extract_options(Args, ?optspec, ?defaults),
    case proplists:get_value('help', Opts) of
        true ->
            usage();
        _ ->
            case proplists:get_value('version', Opts) of
                true ->
                    version();
                _ ->
                    case File of
                        [] ->
                            usage();
                        _ ->
                            case proplists:get_value('to-erl', Opts) of
                                true ->
                                    try to_erl(File) of
                                        Result -> Result
                                    catch
                                        throw:Error -> io:put_chars(Error)
                                    end;
                                _ ->
                                    case proplists:get_value('to-ast', Opts) of
                                        true ->
                                            to_ast(File);
                                        _ ->
                                            CompilerOpts = proplists:delete('help', proplists:delete('version', Opts)),
                                            compile(File, CompilerOpts)
                                    end
                            end
                    end
            end
    end.

version() ->
    rice_compiler:print_version().

to_ast(File) ->
    AST = rice_compiler:ast(File),
    io:format("~w~n", [AST]).

to_erl(File) ->
    Source = rice_compiler:erl(File),
    io:format("~s~n", [Source]).

compile(File, Output) ->
    rice_compiler:compile(File, Output).
