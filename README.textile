h1. Rice Programming Language

Currently, Rice is under heavy development and brainstorm stage. Not usable yet.

The objective is to maintain total interoperability between Rice and Erlang, and do not miss the functional paradigm.

* Variables are immutable (single-assignment)
* No imperative loops (for, while, etc)
* No global scope

Three words in my mind

* Powerful
* Elegant
* Clean

h2. Data types

h3. Strings

<b>"Hello world"</b> and <b>'Hello world'</b> are same.

h3. Integer

1

h3. Float

1.0

h3. Atoms

Erlang atoms, like Ruby symbols.

<b>:keyword</b> or <b>:'this is an atom'</b> are valid atoms.

h2. Special atoms

<b>true</b>, <b>false</b> and <b>undefined</b> are considered special atoms.

<pre>
>>> true == :true
true
>>> false == :false
true
>>> undefined == :undefined
true
</pre>

Just a syntatic sugar here.

h2. Operators

h3. Comparison operators

<pre>
>>> true and true
true
>>> true or false
true
>>> not true
false
>>> not (not true)
true
>>> 1 == 1.0
true
>>> 1 === 1.0
false
</pre>

h3. Logical operators

<pre>
>>> 1 & 1 # and
1
>>> 0 | 0 # or
0
>>> 1 ^ 1 # xor
0
>>> ~2 # negation
-3
>>> 6 >> 1 # shift right
4
>>> 6 << 4 # shift left
96
</pre>

h2. Function definition

<pre>
def fib (0)
    0

def fib (1)
    1

def fib (n) when n > 0
    fib(n - 1) + fib(n - 2)

end
</pre>

h2. Build-in functions for each data type (not OOP)

<pre>
>>> 1.to_s
"1"
>>> 1.puts
1
>>> "hello world".puts
"hello world"
>>> [1, 2, 3, 4].filter(fun x: x.even?)
[2, 4]
>>> [1, 2, 3, 4].filter(fun x: x.even? and x < 4)
[2]
>>> foo = undefined
>>> foo.to_s
"undefined"
</pre>

h2. Anonymous functions

<pre>
>>> my_function = fun x
        x + 1
    end

>>> my_function(2)
3
</pre>

h2. Anonymous functions with multiple clauses

<pre>
>>> test = fun 1
        true
    fun 0
        false
    end

>>> test(1)
true
>>> test(0)
false
</pre>

h2. If-then-else

<pre>
x = 1
#x = "foobar"
#x = 1.0

if x.int?
    puts "integer"
elif x.str?
    puts "string"
else
    puts "anything else"
end
</pre>

h2. Decorators

<pre>
def debug fn
    fun x, y
        puts "called function %s" % fn.name
        fn.call x, y
    end

@debug
def sum x, y
    x + y
</pre>

h2. List comprehension

Example of permutation using two generators

<pre>
>>> [x + y for x in "ab", y in "ab"]
["aa", "ab", "ba", "bb"]
</pre>

h2. Partial application

<pre>
>>> double = 2 * ?
>>> double(2)
3
>>> cube = ?1 * ?1 * ?1
>>> cube(3)
27
>>> [10, 20, 30].map(2 * ?)
[20, 40, 60]
</pre>

h2. Predicate functions

All functions with name terminating in "?" are evaluated to <b>true</b> or <b>false</b>

<pre>
>>> def foo?
        "bar"
>>> foo?
true
>>> def bar?
        0
>>> bar?
false
</pre>
